# -*- coding: utf-8 -*-
"""Customer Segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YSAUThLoYPRGYRo7bUpLsiji5-zos9j3
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data=pd.read_excel("https://archive.ics.uci.edu/ml/machine-learning-databases/00352/Online%20Retail.xlsx")

data.head()

data.isnull().sum()

data.shape

data.describe()

data.info()

data.dropna(subset=['CustomerID'], inplace=True)

data=data[(data['Quantity']>0 )& (data['UnitPrice']>0)]

data['CustomerID']=data['CustomerID'].astype(int)

snapshot_date= max(data['InvoiceDate']) +pd.DateOffset(days=1)

snapshot_date

data['Total']=data['Quantity']*data['UnitPrice']

rfm=data.groupby('CustomerID').agg({'InvoiceDate':lambda x:(snapshot_date-x.max()).days, 'InvoiceNo':'nunique', 'Total':sum})

rfm.rename(columns={'InvoiceDate':'Recency', 'InvoiceNo':'Frequency','Total':'Monetary Value'}, inplace=True)

rfm.head()

rfm.describe()

def bins(r,f,m):
  #recency_bin=[rfm['Recency'].min()-1, 20,50,150,250,rfm['Recency'].max()]
  recency_bin=[0, 20,50,150,250,np.inf]
  #freq_bin=[rfm['Frequency'].min()-1, 2,3,10,100,rfm['Frequency'].max()]
  freq_bin=[0, 2,3,10,100,np.inf]
  #mon_bin=[rfm['Monetary Value'].min()-3,300,600,2000,5000,rfm['Monetary Value'].max()
  mon_bin=[0,300,600,2000,5000,np.inf]
  r_s=pd.cut(r, bins=recency_bin, labels=range(1,6), include_lowest=True)
  r_s=5-r_s.astype(int) +1
  f_s=pd.cut(f,bins=freq_bin,labels=range(1,6),include_lowest=True).astype(int)
  m_s=pd.cut(m,bins=mon_bin,labels=range(1,6),include_lowest=True).astype(int)
  return r_s,f_s,m_s

rfm['R_score'], rfm['F_score'], rfm['M_Score']=bins(rfm['Recency'],rfm['Frequency'],rfm['Monetary Value'])

rfm.head(10)

from sklearn.cluster import KMeans

x=rfm[['R_score','F_score','M_Score']]

wcss=[]

for i in range(2,11):
  kmeans=KMeans(n_clusters=i,init='k-means++',random_state=42)
  kmeans.fit(x)
  wcss.append(kmeans.inertia_)

plt.plot(wcss)
plt.show()

"""K=4"""

kmeans=KMeans(n_clusters=4,n_init=10,random_state=42)

rfm['Cluster']=kmeans.fit_predict(x)

rfm.head(10)

cluster_summary=rfm.groupby('Cluster').agg({'R_score':'mean','F_score':'mean','M_Score':'mean'}).reset_index()

cluster_summary

plt.bar(cluster_summary.index,cluster_summary['R_score'])
plt.show()

plt.bar(cluster_summary.index,cluster_summary['F_score'])
plt.show()

plt.bar(cluster_summary.index,cluster_summary['M_Score'])
plt.show()

cluster_count=rfm['Cluster'].value_counts()
precentage_customers=(cluster_count/cluster_count.sum())*100
precentage_customers

labels = ['Champions(Power Shoppers)','Loyal Customers','At-risk Customers','Recent Customers']

plt.pie(precentage_customers,labels=labels, autopct='%1.1f%%')

rfm.head()

kmeans.predict([[5,1,3]])

x_new=[[20],[300],[4000]]
y=[]
y[0:2]=bins(x_new[0],x_new[1],x_new[2])
# Flatten the nested list
y2= [val for sublist in y for val in sublist]
y2

with open('bins_function.pkl', 'wb') as file:
    pickle.dump(bins, file)

with open('bins_function.pkl', 'rb') as file:
    stored_function = pickle.load(file)
result=[]
result[0:2] = stored_function(x_new[0],x_new[1],x_new[2])
results= [val for sublist in result for val in sublist]

kmeans.predict([results])

import pickle
pickle.dump(kmeans,open('cust_seg.pkl','wb'))

pick_cust_seg=pickle.load(open('cust_seg.pkl','rb'))

pick_cust_seg.predict([y2])

if __name__ == "__main__":
    # This block will only run if the script is executed directly, not when imported
    # You can add test or example code here
    print("Hello")
    pass